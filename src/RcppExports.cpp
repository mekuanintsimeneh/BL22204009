// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbs_exponential_cpp
NumericVector gibbs_exponential_cpp(NumericVector y, double alpha, double beta, int n_iter);
RcppExport SEXP _BL22204009_gibbs_exponential_cpp(SEXP ySEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_exponential_cpp(y, alpha, beta, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// bayesian_poisson_gamma_cpp
NumericVector bayesian_poisson_gamma_cpp(NumericVector data, double alpha_prior, double beta_prior, int n_iter);
RcppExport SEXP _BL22204009_bayesian_poisson_gamma_cpp(SEXP dataSEXP, SEXP alpha_priorSEXP, SEXP beta_priorSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_prior(alpha_priorSEXP);
    Rcpp::traits::input_parameter< double >::type beta_prior(beta_priorSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesian_poisson_gamma_cpp(data, alpha_prior, beta_prior, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// logistic_cpp
NumericVector logistic_cpp(NumericVector x);
RcppExport SEXP _BL22204009_logistic_cpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_cpp(x));
    return rcpp_result_gen;
END_RCPP
}
// log_likelihood_cpp
double log_likelihood_cpp(NumericMatrix X, NumericVector y, NumericVector beta);
RcppExport SEXP _BL22204009_log_likelihood_cpp(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(log_likelihood_cpp(X, y, beta));
    return rcpp_result_gen;
END_RCPP
}
// gradient_cpp
NumericVector gradient_cpp(NumericMatrix X, NumericVector y, NumericVector beta);
RcppExport SEXP _BL22204009_gradient_cpp(SEXP XSEXP, SEXP ySEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_cpp(X, y, beta));
    return rcpp_result_gen;
END_RCPP
}
// bino_logistic_cpp
NumericVector bino_logistic_cpp(NumericMatrix X, NumericVector y, double alpha, int max_iter, double tol);
RcppExport SEXP _BL22204009_bino_logistic_cpp(SEXP XSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(bino_logistic_cpp(X, y, alpha, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BL22204009_gibbs_exponential_cpp", (DL_FUNC) &_BL22204009_gibbs_exponential_cpp, 4},
    {"_BL22204009_bayesian_poisson_gamma_cpp", (DL_FUNC) &_BL22204009_bayesian_poisson_gamma_cpp, 4},
    {"_BL22204009_logistic_cpp", (DL_FUNC) &_BL22204009_logistic_cpp, 1},
    {"_BL22204009_log_likelihood_cpp", (DL_FUNC) &_BL22204009_log_likelihood_cpp, 3},
    {"_BL22204009_gradient_cpp", (DL_FUNC) &_BL22204009_gradient_cpp, 3},
    {"_BL22204009_bino_logistic_cpp", (DL_FUNC) &_BL22204009_bino_logistic_cpp, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_BL22204009(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
